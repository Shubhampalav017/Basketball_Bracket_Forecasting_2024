---
title: "March Machine Learning Mania 2024"
author: Shubham Palav
format: 
  html:
    theme:
          light: flaty
          dark: darkly
    toc: true
    code-fold: true
    code-tools: true
    code-overflow: wrap
---


::: {#cb1 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
import matplotlib as mpl
from matplotlib.patches import Circle, Rectangle, Arc
import seaborn as sns

from sklearn.metrics import accuracy_score, log_loss
import xgboost as xgb
from sklearn.model_selection import GroupKFold

plt.style.use("fivethirtyeight")
mypal = plt.rcParams["axes.prop_cycle"].by_key()["color"]
```
:::

::: {#cb2 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
!ls -GFlash ../input/march-machine-learning-mania-2024/
```
:::

::: {.cell-output .cell-output-stdout}
    total 144M
       0 drwxr-xr-x 2 nobody    0 May 13 08:49 ./
    4.0K drwxr-xr-x 3 root   4.0K Jun 12 12:38 ../
    4.0K -rw-r--r-- 1 nobody 1.4K May 13 08:49 2024_tourney_seeds.csv
     12K -rw-r--r-- 1 nobody 9.1K May 13 08:49 Cities.csv
    4.0K -rw-r--r-- 1 nobody 1.7K May 13 08:49 Conferences.csv
    168K -rw-r--r-- 1 nobody 168K May 13 08:49 MConferenceTourneyGames.csv
    2.5M -rw-r--r-- 1 nobody 2.5M May 13 08:49 MGameCities.csv
    111M -rw-r--r-- 1 nobody 111M May 13 08:49 MMasseyOrdinals_thruSeason2024_day128.csv
     72K -rw-r--r-- 1 nobody  72K May 13 08:49 MNCAATourneyCompactResults.csv
    132K -rw-r--r-- 1 nobody 129K May 13 08:49 MNCAATourneyDetailedResults.csv
     16K -rw-r--r-- 1 nobody  16K May 13 08:49 MNCAATourneySeedRoundSlots.csv
     40K -rw-r--r-- 1 nobody  38K May 13 08:49 MNCAATourneySeeds.csv
     52K -rw-r--r-- 1 nobody  50K May 13 08:49 MNCAATourneySlots.csv
    5.3M -rw-r--r-- 1 nobody 5.3M May 13 08:49 MRegularSeasonCompactResults.csv
     11M -rw-r--r-- 1 nobody  11M May 13 08:49 MRegularSeasonDetailedResults.csv
    4.0K -rw-r--r-- 1 nobody 1.8K May 13 08:49 MSeasons.csv
     60K -rw-r--r-- 1 nobody  59K May 13 08:49 MSecondaryTourneyCompactResults.csv
     28K -rw-r--r-- 1 nobody  27K May 13 08:49 MSecondaryTourneyTeams.csv
    388K -rw-r--r-- 1 nobody 385K May 13 08:49 MTeamCoaches.csv
    220K -rw-r--r-- 1 nobody 220K May 13 08:49 MTeamConferences.csv
     24K -rw-r--r-- 1 nobody  23K May 13 08:49 MTeamSpellings.csv
     12K -rw-r--r-- 1 nobody 9.8K May 13 08:49 MTeams.csv
    2.4M -rw-r--r-- 1 nobody 2.4M May 13 08:49 WGameCities.csv
     48K -rw-r--r-- 1 nobody  47K May 13 08:49 WNCAATourneyCompactResults.csv
     84K -rw-r--r-- 1 nobody  82K May 13 08:49 WNCAATourneyDetailedResults.csv
     28K -rw-r--r-- 1 nobody  25K May 13 08:49 WNCAATourneySeeds.csv
     36K -rw-r--r-- 1 nobody  34K May 13 08:49 WNCAATourneySlots.csv
    3.7M -rw-r--r-- 1 nobody 3.7M May 13 08:49 WRegularSeasonCompactResults.csv
    7.3M -rw-r--r-- 1 nobody 7.3M May 13 08:49 WRegularSeasonDetailedResults.csv
    4.0K -rw-r--r-- 1 nobody 1.4K May 13 08:49 WSeasons.csv
    156K -rw-r--r-- 1 nobody 154K May 13 08:49 WTeamConferences.csv
     24K -rw-r--r-- 1 nobody  22K May 13 08:49 WTeamSpellings.csv
    8.0K -rw-r--r-- 1 nobody 6.1K May 13 08:49 WTeams.csv
    4.0K -rw-r--r-- 1 nobody 2.1K May 13 08:49 sample_submission.csv
:::


:::
## Files we are interested in:
-   **MRegularSeasonCompactResults.csv &
    WMRegularSeasonCompactResults.csv**

    All game results from the regular season.

-   **MNCAATourneyCompactResults.csv & WNCAATourneyCompactResults.csv**

    All game results from past tournaments.

-   **MNCAATourneySeeds.csv & MNCAATourneySeeds.csv**

    The seeding for the tournaments

-    2024_tourney_seeds.csv

    File that will be updated with 2024 seeds once released (2023 seeds
    prior to that)

::: {#cell-4 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:48.961929Z\",\"iopub.status.busy\":\"2024-06-12T12:38:48.961421Z\",\"iopub.status.idle\":\"2024-06-12T12:38:48.968782Z\",\"shell.execute_reply\":\"2024-06-12T12:38:48.967196Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:48.961880Z\"}" papermill="{\"duration\":0.016358,\"end_time\":\"2024-06-05T15:38:41.409851\",\"exception\":false,\"start_time\":\"2024-06-05T15:38:41.393493\",\"status\":\"completed\"}" tags="[]" trusted="true" execution_count="3"}
::: {#cb4 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
DATA_PATH = "../input/march-machine-learning-mania-2024/"
```
:::
:::

::: {#cell-5 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:48.972850Z\",\"iopub.status.busy\":\"2024-06-12T12:38:48.971826Z\",\"iopub.status.idle\":\"2024-06-12T12:38:49.511151Z\",\"shell.execute_reply\":\"2024-06-12T12:38:49.510063Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:48.972805Z\"}" papermill="{\"duration\":0.467744,\"end_time\":\"2024-06-05T15:38:41.881579\",\"exception\":false,\"start_time\":\"2024-06-05T15:38:41.413835\",\"status\":\"completed\"}" tags="[]" trusted="true" execution_count="4"}
::: {#cb5 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_seeds = pd.concat(
    [
        pd.read_csv(DATA_PATH + "MNCAATourneySeeds.csv").assign(League="M"),
        pd.read_csv(DATA_PATH + "WNCAATourneySeeds.csv").assign(League="W"),
    ],
).reset_index(drop=True)

df_season_results = pd.concat(
    [
        pd.read_csv(DATA_PATH + "MRegularSeasonCompactResults.csv").assign(League="M"),
        pd.read_csv(DATA_PATH + "WRegularSeasonCompactResults.csv").assign(League="W"),
    ]
).reset_index(drop=True)

df_tourney_results = pd.concat(
    [
        pd.read_csv(DATA_PATH + "MNCAATourneyCompactResults.csv").assign(League="M"),
        pd.read_csv(DATA_PATH + "WNCAATourneyCompactResults.csv").assign(League="W"),
    ]
).reset_index(drop=True)
```
:::
:::

::: {#cell-6 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:49.512806Z\",\"iopub.status.busy\":\"2024-06-12T12:38:49.512415Z\",\"iopub.status.idle\":\"2024-06-12T12:38:49.545196Z\",\"shell.execute_reply\":\"2024-06-12T12:38:49.543560Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:49.512759Z\"}" trusted="true" execution_count="5"}
::: {#cb6 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
Season = 2024
filtered_wins =  df_seeds[ df_seeds['Season'] == Season]
filtered_wins
```
:::

::: {.cell-output .cell-output-display execution_count="5"}
<div>

<div>

         Season   Seed   TeamID   League
  ------ -------- ------ -------- --------
  2490   2024     W01    1163     M
  2491   2024     W02    1235     M
  2492   2024     W03    1228     M
  2493   2024     W04    1120     M
  2494   2024     W05    1361     M
  \...   \...     \...   \...     \...
  4229   2024     Z12b   3435     W
  4230   2024     Z13    3267     W
  4231   2024     Z14    3238     W
  4232   2024     Z15    3263     W
  4233   2024     Z16    3394     W

136 rows Ã— 4 columns

</div>

</div>
:::
:::

::: {#creating-team-season-results .section .level1}
# **Creating Team Season Results**

-   We the the data from the existing format with 1 row per game
-   New format has 1 row for each team's game - win or loss.
-   This data can be aggregated for season metrics

::: {#cell-9 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:49.547307Z\",\"iopub.status.busy\":\"2024-06-12T12:38:49.546898Z\",\"iopub.status.idle\":\"2024-06-12T12:38:49.781615Z\",\"shell.execute_reply\":\"2024-06-12T12:38:49.780228Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:49.547271Z\"}" papermill="{\"duration\":0.005604,\"end_time\":\"2024-06-05T15:38:41.893202\",\"exception\":false,\"start_time\":\"2024-06-05T15:38:41.887598\",\"status\":\"completed\"}" tags="[]" trusted="true" execution_count="6"}
::: {#cb7 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_team_season_results = pd.concat(
    [
        df_season_results[["Season", "League", "WTeamID", "DayNum", "WScore", "LScore"]]
        .assign(GameResult="W")
        .rename(
            columns={"WTeamID": "TeamID", "WScore": "TeamScore", "LScore": "OppScore"}
        ),
        df_season_results[["Season", "League", "LTeamID", "DayNum", "WScore", "LScore"]]
        .assign(GameResult="L")
        .rename(
            columns={"LTeamID": "TeamID", "LScore": "TeamScore", "WScore": "OppScore"}
        ),
    ]
).reset_index(drop=True)
```
:::
:::
:::

::: {#create-season-features .section .level1}
# Create Season Features

-   add some features to this data like the score differential

::: {#cell-11 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:49.783969Z\",\"iopub.status.busy\":\"2024-06-12T12:38:49.783621Z\",\"iopub.status.idle\":\"2024-06-12T12:38:49.841322Z\",\"shell.execute_reply\":\"2024-06-12T12:38:49.840113Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:49.783934Z\"}" papermill="{\"duration\":0.004238,\"end_time\":\"2024-06-05T15:38:41.903307\",\"exception\":false,\"start_time\":\"2024-06-05T15:38:41.899069\",\"status\":\"completed\"}" tags="[]" trusted="true" execution_count="7"}
::: {#cb8 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
# Score Differential
df_team_season_results["ScoreDiff"] = (
    df_team_season_results["TeamScore"] - df_team_season_results["OppScore"]
)
df_team_season_results["Win"] = (df_team_season_results["GameResult"] == "W").astype(
    "int"
)
```
:::
:::

::: {#cell-12 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:49.846567Z\",\"iopub.status.busy\":\"2024-06-12T12:38:49.846126Z\",\"iopub.status.idle\":\"2024-06-12T12:38:49.885527Z\",\"shell.execute_reply\":\"2024-06-12T12:38:49.884529Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:49.846524Z\"}" trusted="true" execution_count="8"}
::: {#cb9 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_team_season_results.sample(10, random_state=529)
```
:::

::: {.cell-output .cell-output-display execution_count="8"}
<div>

<div>

           Season   League   TeamID   DayNum   TeamScore   OppScore   GameResult   ScoreDiff   Win
  -------- -------- -------- -------- -------- ----------- ---------- ------------ ----------- -----
  493232   2022     M        1444     96       64          77         L            -13         0
  71811    2002     M        1281     79       74          50         W            24          1
  555548   2008     W        3276     115      67          69         L            -2          0
  84226    2005     M        1393     40       86          56         W            30          1
  129439   2014     M        1368     8        63          62         W            1           1
  364900   1996     M        1148     85       46          116        L            -70         0
  587485   2015     W        3394     18       66          68         L            -2          0
  397470   2003     M        1266     129      76          83         L            -7          0
  99374    2008     M        1177     47       93          88         W            5           1
  532105   2003     W        3414     130      50          83         L            -33         0

</div>

</div>
:::
:::
:::

::: {#aggregate-for-teams-total-season-stats .section .level1}
# Aggregate for team's total season stats

::: {#cell-14 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:49.887123Z\",\"iopub.status.busy\":\"2024-06-12T12:38:49.886822Z\",\"iopub.status.idle\":\"2024-06-12T12:38:52.883515Z\",\"shell.execute_reply\":\"2024-06-12T12:38:52.882326Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:49.887097Z\"}" trusted="true" execution_count="9"}
::: {#cb10 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
# Aggregate the data
team_season_agg = (
    df_team_season_results.groupby(["Season", "TeamID", "League"])
    .agg(
        AvgScoreDiff=("ScoreDiff", "mean"),
        MedianScoreDiff=("ScoreDiff", "median"),
        MinScoreDiff=("ScoreDiff", "min"),
        MaxScoreDiff=("ScoreDiff", "max"),
        Wins=("Win", "sum"),
        Losses=("GameResult", lambda x: (x == "L").sum()),
        WinPercentage=("Win", "mean"),
    )
    .reset_index()
)
```
:::
:::

::: {#cell-15 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:52.889150Z\",\"iopub.status.busy\":\"2024-06-12T12:38:52.888758Z\",\"iopub.status.idle\":\"2024-06-12T12:38:52.906527Z\",\"shell.execute_reply\":\"2024-06-12T12:38:52.905037Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:52.889123Z\"}" trusted="true" execution_count="10"}
::: {#cb11 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
team_season_agg.head()
```
:::

::: {.cell-output .cell-output-display execution_count="10"}
<div>

<div>

      Season   TeamID   League   AvgScoreDiff   MedianScoreDiff   MinScoreDiff   MaxScoreDiff   Wins   Losses   WinPercentage
  --- -------- -------- -------- -------------- ----------------- -------------- -------------- ------ -------- ---------------
  0   1985     1102     M        -5.791667      -5.5              -41            29             5      19       0.208333
  1   1985     1103     M        -3.043478      -2.0              -22            16             9      14       0.391304
  2   1985     1104     M        7.800000       6.5               -12            25             21     9        0.700000
  3   1985     1106     M        -3.791667      -1.5              -35            28             10     14       0.416667
  4   1985     1108     M        7.960000       4.0               -15            35             19     6        0.760000

</div>

</div>
:::
:::

::: {#cell-16 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:52.908651Z\",\"iopub.status.busy\":\"2024-06-12T12:38:52.908174Z\",\"iopub.status.idle\":\"2024-06-12T12:38:52.941921Z\",\"shell.execute_reply\":\"2024-06-12T12:38:52.940486Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:52.908541Z\"}" trusted="true" execution_count="11"}
::: {#cb12 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_seeds["ChalkSeed"] = (
    df_seeds["Seed"].str.replace("a", "").str.replace("b", "").str[1:].astype("int")
)

team_season_agg = team_season_agg.merge(
    df_seeds, on=["Season", "TeamID", "League"], how="left"
)
```
:::
:::

::: {#cell-17 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:52.943692Z\",\"iopub.status.busy\":\"2024-06-12T12:38:52.943322Z\",\"iopub.status.idle\":\"2024-06-12T12:38:52.951295Z\",\"shell.execute_reply\":\"2024-06-12T12:38:52.949957Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:52.943662Z\"}" trusted="true" execution_count="12"}
::: {#cb13 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
team_season_agg.shape, df_seeds.shape
```
:::

::: {.cell-output .cell-output-display execution_count="12"}
    ((22150, 12), (4234, 5))
:::
:::
:::

::: {#tournament-results-aggregation .section .level1}
# Tournament Results Aggregation

::: {#cell-19 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:52.953489Z\",\"iopub.status.busy\":\"2024-06-12T12:38:52.953044Z\",\"iopub.status.idle\":\"2024-06-12T12:38:52.975360Z\",\"shell.execute_reply\":\"2024-06-12T12:38:52.973852Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:52.953426Z\"}" trusted="true" execution_count="13"}
::: {#cb15 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_team_tourney_results = pd.concat(
    [
        df_tourney_results[
            ["Season", "League", "WTeamID", "LTeamID", "WScore", "LScore"]
        ]
        .assign(GameResult="W")
        .rename(
            columns={
                "WTeamID": "TeamID",
                "LTeamID": "OppTeamID",
                "WScore": "TeamScore",
                "LScore": "OppScore",
            }
        ),
        df_tourney_results[
            ["Season", "League", "LTeamID", "WTeamID", "LScore", "WScore"]
        ]
        .assign(GameResult="L")
        .rename(
            columns={
                "LTeamID": "TeamID",
                "WTeamID": "OppTeamID",
                "LScore": "TeamScore",
                "WScore": "OppScore",
            }
        ),
    ]
).reset_index(drop=True)

df_team_tourney_results["Win"] = (df_team_tourney_results["GameResult"] == "W").astype(
    "int"
)
```
:::
:::

::: {#cell-20 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:52.978231Z\",\"iopub.status.busy\":\"2024-06-12T12:38:52.977249Z\",\"iopub.status.idle\":\"2024-06-12T12:38:52.993994Z\",\"shell.execute_reply\":\"2024-06-12T12:38:52.992692Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:52.978188Z\"}" trusted="true" execution_count="14"}
::: {#cb16 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_team_tourney_results.head()
```
:::

::: {.cell-output .cell-output-display execution_count="14"}
<div>

<div>

      Season   League   TeamID   OppTeamID   TeamScore   OppScore   GameResult   Win
  --- -------- -------- -------- ----------- ----------- ---------- ------------ -----
  0   1985     M        1116     1234        63          54         W            1
  1   1985     M        1120     1345        59          58         W            1
  2   1985     M        1207     1250        68          43         W            1
  3   1985     M        1229     1425        58          55         W            1
  4   1985     M        1242     1325        49          38         W            1

</div>

</div>
:::
:::
:::

::: {#tourney-dataset-with-features .section .level1}
# Tourney Dataset with Features

-   merge our team's regular season features with our tourney dataframe.
-   This gives us the data format that we will use to train our model.
-   target column is the "Winner" and the features are the regular
    season stats.

::: {#cell-22 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:52.996029Z\",\"iopub.status.busy\":\"2024-06-12T12:38:52.995621Z\",\"iopub.status.idle\":\"2024-06-12T12:38:53.037773Z\",\"shell.execute_reply\":\"2024-06-12T12:38:53.036537Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:52.995994Z\"}" trusted="true" execution_count="15"}
::: {#cb17 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_historic_tourney_features = df_team_tourney_results.merge(
    team_season_agg[
        ["Season", "League", "TeamID", "WinPercentage", "MedianScoreDiff", "ChalkSeed"]
    ],
    on=["Season", "League", "TeamID"],
    how="left",
).merge(
    team_season_agg[
        ["Season", "League", "TeamID", "WinPercentage", "MedianScoreDiff", "ChalkSeed"]
    ].rename(
        columns={
            "TeamID": "OppTeamID",
            "WinPercentage": "OppWinPercentage",
            "MedianScoreDiff": "OppMedianScoreDiff",
            "ChalkSeed": "OppChalkSeed",
        }
    ),
    on=["Season", "League", "OppTeamID"],
)
```
:::
:::

::: {#cell-23 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:53.040363Z\",\"iopub.status.busy\":\"2024-06-12T12:38:53.039860Z\",\"iopub.status.idle\":\"2024-06-12T12:38:53.062746Z\",\"shell.execute_reply\":\"2024-06-12T12:38:53.061341Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:53.040323Z\"}" trusted="true" execution_count="16"}
::: {#cb18 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_historic_tourney_features.head()
```
:::

::: {.cell-output .cell-output-display execution_count="16"}
<div>

<div>

      Season   League   TeamID   OppTeamID   TeamScore   OppScore   GameResult   Win   WinPercentage   MedianScoreDiff   ChalkSeed   OppWinPercentage   OppMedianScoreDiff   OppChalkSeed
  --- -------- -------- -------- ----------- ----------- ---------- ------------ ----- --------------- ----------------- ----------- ------------------ -------------------- --------------
  0   1985     M        1116     1234        63          54         W            1     0.636364        5.0               9.0         0.666667           9.5                  8.0
  1   1985     M        1120     1345        59          58         W            1     0.620690        2.0               11.0        0.680000           9.0                  6.0
  2   1985     M        1207     1250        68          43         W            1     0.925926        14.0              1.0         0.379310           -3.0                 16.0
  3   1985     M        1229     1425        58          55         W            1     0.740741        6.0               9.0         0.678571           2.5                  8.0
  4   1985     M        1242     1325        49          38         W            1     0.766667        5.5               3.0         0.740741           6.0                  14.0

</div>

</div>
:::
:::

::: {#cell-24 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:53.065219Z\",\"iopub.status.busy\":\"2024-06-12T12:38:53.064729Z\",\"iopub.status.idle\":\"2024-06-12T12:38:53.077125Z\",\"shell.execute_reply\":\"2024-06-12T12:38:53.075783Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:53.065174Z\"}" trusted="true" execution_count="17"}
::: {#cb19 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
 df_historic_tourney_features.columns
```
:::

::: {.cell-output .cell-output-display execution_count="17"}
    Index(['Season', 'League', 'TeamID', 'OppTeamID', 'TeamScore', 'OppScore',
           'GameResult', 'Win', 'WinPercentage', 'MedianScoreDiff', 'ChalkSeed',
           'OppWinPercentage', 'OppMedianScoreDiff', 'OppChalkSeed'],
          dtype='object')
:::
:::

::: {#cell-25 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:53.079507Z\",\"iopub.status.busy\":\"2024-06-12T12:38:53.079040Z\",\"iopub.status.idle\":\"2024-06-12T12:38:53.093856Z\",\"shell.execute_reply\":\"2024-06-12T12:38:53.092397Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:53.079447Z\"}" trusted="true" execution_count="18"}
::: {#cb21 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_historic_tourney_features["WinPctDiff"] = (
    df_historic_tourney_features["WinPercentage"]
    - df_historic_tourney_features["OppWinPercentage"]
)

df_historic_tourney_features["ChalkSeedDiff"] = (
    df_historic_tourney_features["ChalkSeed"]
    - df_historic_tourney_features["OppChalkSeed"]
)

df_historic_tourney_features["MedianScoreDiffDiff"] = (
    df_historic_tourney_features["MedianScoreDiff"]
    - df_historic_tourney_features["OppMedianScoreDiff"]
)
```
:::
:::

::: {#cell-26 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:53.096190Z\",\"iopub.status.busy\":\"2024-06-12T12:38:53.095660Z\",\"iopub.status.idle\":\"2024-06-12T12:38:53.124782Z\",\"shell.execute_reply\":\"2024-06-12T12:38:53.123165Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:53.096145Z\"}" trusted="true" execution_count="19"}
::: {#cb22 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_historic_tourney_features
```
:::

::: {.cell-output .cell-output-display execution_count="19"}
<div>

<div>

         Season   League   TeamID   OppTeamID   TeamScore   OppScore   GameResult   Win    WinPercentage   MedianScoreDiff   ChalkSeed   OppWinPercentage   OppMedianScoreDiff   OppChalkSeed   WinPctDiff   ChalkSeedDiff   MedianScoreDiffDiff
  ------ -------- -------- -------- ----------- ----------- ---------- ------------ ------ --------------- ----------------- ----------- ------------------ -------------------- -------------- ------------ --------------- ---------------------
  0      1985     M        1116     1234        63          54         W            1      0.636364        5.0               9.0         0.666667           9.5                  8.0            -0.030303    1.0             -4.5
  1      1985     M        1120     1345        59          58         W            1      0.620690        2.0               11.0        0.680000           9.0                  6.0            -0.059310    5.0             -7.0
  2      1985     M        1207     1250        68          43         W            1      0.925926        14.0              1.0         0.379310           -3.0                 16.0           0.546616     -15.0           17.0
  3      1985     M        1229     1425        58          55         W            1      0.740741        6.0               9.0         0.678571           2.5                  8.0            0.062169     1.0             3.5
  4      1985     M        1242     1325        49          38         W            1      0.766667        5.5               3.0         0.740741           6.0                  14.0           0.025926     -11.0           -0.5
  \...   \...     \...     \...     \...        \...        \...       \...         \...   \...            \...              \...        \...               \...                 \...           \...         \...            \...
  8063   2023     W        3268     3376        75          86         L            0      0.806452        11.0              2.0         1.000000           28.0                 1.0            -0.193548    1.0             -17.0
  8064   2023     W        3326     3439        74          84         L            0      0.781250        12.0              3.0         0.870968           13.0                 1.0            -0.089718    2.0             -1.0
  8065   2023     W        3376     3234        73          77         L            0      1.000000        28.0              1.0         0.812500           13.5                 2.0            0.187500     -1.0            14.5
  8066   2023     W        3439     3261        72          79         L            0      0.870968        13.0              1.0         0.933333           22.0                 3.0            -0.062366    -2.0            -9.0
  8067   2023     W        3234     3261        85          102        L            0      0.812500        13.5              2.0         0.933333           22.0                 3.0            -0.120833    -1.0            -8.5

8068 rows Ã— 17 columns

</div>

</div>
:::
:::

::: {#cell-27 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:53.127068Z\",\"iopub.status.busy\":\"2024-06-12T12:38:53.126698Z\",\"iopub.status.idle\":\"2024-06-12T12:38:53.184080Z\",\"shell.execute_reply\":\"2024-06-12T12:38:53.182586Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:53.127037Z\"}" trusted="true" execution_count="20"}
::: {#cb23 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
TeamID = 1116
filtered_wins =  df_historic_tourney_features[ df_historic_tourney_features['TeamID'] == TeamID]
filtered_wins
```
:::

::: {.cell-output .cell-output-display execution_count="20"}
<div>

<div>

         Season   League   TeamID   OppTeamID   TeamScore   OppScore   GameResult   Win   WinPercentage   MedianScoreDiff   ChalkSeed   OppWinPercentage   OppMedianScoreDiff   OppChalkSeed   WinPctDiff   ChalkSeedDiff   MedianScoreDiffDiff
  ------ -------- -------- -------- ----------- ----------- ---------- ------------ ----- --------------- ----------------- ----------- ------------------ -------------------- -------------- ------------ --------------- ---------------------
  0      1985     M        1116     1234        63          54         W            1     0.636364        5.0               9.0         0.666667           9.5                  8.0            -0.030303    1.0             -4.5
  253    1989     M        1116     1258        120         101        W            1     0.800000        16.5              5.0         0.655172           5.0                  12.0           0.144828     -7.0            11.5
  315    1990     M        1116     1343        68          64         W            1     0.866667        15.0              4.0         0.750000           11.5                 13.0           0.116667     -9.0            3.5
  347    1990     M        1116     1173        86          84         W            1     0.866667        15.0              4.0         0.700000           6.0                  12.0           0.166667     -8.0            9.0
  363    1990     M        1116     1314        96          73         W            1     0.866667        15.0              4.0         0.612903           5.0                  8.0            0.253763     -4.0            10.0
  371    1990     M        1116     1400        88          85         W            1     0.866667        15.0              4.0         0.700000           6.0                  10.0           0.166667     -6.0            9.0
  396    1991     M        1116     1209        117         76         W            1     0.909091        20.0              1.0         0.533333           1.0                  16.0           0.375758     -15.0           19.0
  419    1991     M        1116     1113        97          90         W            1     0.909091        20.0              1.0         0.678571           6.0                  8.0            0.230519     -7.0            14.0
  426    1991     M        1116     1104        93          70         W            1     0.909091        20.0              1.0         0.700000           5.5                  4.0            0.209091     -3.0            14.5
  442    1992     M        1116     1293        80          69         W            1     0.758621        11.0              3.0         0.571429           3.0                  14.0           0.187192     -11.0           8.0
  504    1993     M        1116     1221        94          64         W            1     0.714286        8.0               4.0         0.793103           10.0                 13.0           -0.078818    -9.0            -2.0
  536    1993     M        1116     1385        80          74         W            1     0.714286        8.0               4.0         0.642857           4.0                  5.0            0.071429     -1.0            4.0
  584    1994     M        1116     1299        94          79         W            1     0.888889        13.0              1.0         0.555556           3.0                  16.0           0.333333     -15.0           10.0
  608    1994     M        1116     1207        85          73         W            1     0.888889        13.0              1.0         0.592593           4.0                  9.0            0.296296     -8.0            9.0
  619    1994     M        1116     1409        103         84         W            1     0.888889        13.0              1.0         0.740741           10.0                 12.0           0.148148     -11.0           3.0
  625    1994     M        1116     1276        76          68         W            1     0.888889        13.0              1.0         0.750000           7.5                  3.0            0.138889     -2.0            5.5
  627    1994     M        1116     1112        91          82         W            1     0.888889        13.0              1.0         0.833333           17.0                 2.0            0.055556     -1.0            -4.0
  629    1994     M        1116     1181        76          72         W            1     0.888889        13.0              1.0         0.821429           12.0                 2.0            0.067460     -1.0            1.0
  646    1995     M        1116     1411        79          78         W            1     0.812500        7.5               2.0         0.769231           6.0                  15.0           0.043269     -13.0           1.5
  670    1995     M        1116     1393        96          94         W            1     0.812500        7.5               2.0         0.666667           2.0                  7.0            0.145833     -5.0            5.5
  682    1995     M        1116     1272        96          91         W            1     0.812500        7.5               2.0         0.709677           6.0                  6.0            0.102823     -4.0            1.5
  688    1995     M        1116     1438        68          61         W            1     0.812500        7.5               2.0         0.733333           8.0                  4.0            0.079167     -2.0            -0.5
  690    1995     M        1116     1314        75          68         W            1     0.812500        7.5               2.0         0.827586           10.0                 2.0            -0.015086    0.0             -2.5
  693    1996     M        1116     1336        86          80         W            1     0.600000        7.0               12.0        0.777778           10.0                 5.0            -0.177778    7.0             -3.0
  725    1996     M        1116     1266        65          56         W            1     0.600000        7.0               12.0        0.758621           9.0                  4.0            -0.158621    8.0             -2.0
  820    1998     M        1116     1304        74          65         W            1     0.766667        7.5               6.0         0.645161           8.0                  11.0           0.121505     -5.0            -0.5
  882    1999     M        1116     1373        94          80         W            1     0.687500        5.0               4.0         0.833333           8.0                  13.0           -0.145833    -9.0            -3.0
  1473   2008     M        1116     1231        86          72         W            1     0.666667        6.0               9.0         0.781250           10.5                 8.0            -0.114583    1.0             -4.5
  1921   2015     M        1116     1459        56          53         W            1     0.764706        7.0               5.0         0.812500           5.5                  12.0           -0.047794    -7.0            1.5
  2070   2017     M        1116     1371        77          71         W            1     0.735294        8.5               8.0         0.656250           3.0                  9.0            0.079044     -1.0            5.5
  2255   2021     M        1116     1159        85          68         W            1     0.785714        11.5              3.0         0.933333           11.0                 14.0           -0.147619    -11.0           0.5
  2286   2021     M        1116     1403        68          66         W            1     0.785714        11.5              3.0         0.629630           5.0                  6.0            0.156085     -3.0            6.5
  2302   2021     M        1116     1331        72          70         W            1     0.785714        11.5              3.0         0.565217           2.0                  15.0           0.220497     -12.0           9.5
  2321   2022     M        1116     1436        75          71         W            1     0.757576        8.0               4.0         0.843750           13.0                 13.0           -0.086174    -9.0            -5.0
  2353   2022     M        1116     1308        53          48         W            1     0.757576        8.0               4.0         0.793103           11.0                 12.0           -0.035528    -8.0            -3.0
  2369   2022     M        1116     1211        74          68         W            1     0.757576        8.0               4.0         0.896552           25.0                 1.0            -0.138976    3.0             -17.0
  2389   2023     M        1116     1228        73          63         W            1     0.606061        6.0               8.0         0.625000           9.0                  9.0            -0.018939    -1.0            -3.0
  2421   2023     M        1116     1242        72          71         W            1     0.606061        6.0               8.0         0.794118           6.0                  1.0            -0.188057    7.0             0.0
  4073   1985     M        1116     1385        65          68         L            0     0.636364        5.0               9.0         0.900000           11.0                 1.0            -0.263636    8.0             -6.0
  4254   1988     M        1116     1437        74          82         L            0     0.724138        10.0              11.0        0.636364           3.0                  6.0            0.087774     5.0             7.0
  4321   1989     M        1116     1257        84          93         L            0     0.800000        16.5              5.0         0.733333           8.0                  4.0            0.066667     1.0             8.5
  4409   1990     M        1116     1181        83          97         L            0     0.866667        15.0              4.0         0.750000           11.5                 3.0            0.116667     1.0             3.5
  4468   1991     M        1116     1242        81          93         L            0     0.909091        20.0              1.0         0.750000           10.5                 3.0            0.159091     -2.0            9.5
  4511   1992     M        1116     1272        80          82         L            0     0.758621        11.0              3.0         0.666667           3.5                  6.0            0.091954     -3.0            7.5
  4592   1993     M        1116     1314        74          80         L            0     0.714286        8.0               4.0         0.875000           17.5                 1.0            -0.160714    3.0             -9.5
  4726   1995     M        1116     1417        78          89         L            0     0.812500        7.5               2.0         0.925926           13.0                 1.0            -0.113426    1.0             -5.5
  4777   1996     M        1116     1269        63          79         L            0     0.600000        7.0               12.0        0.968750           12.0                 1.0            -0.368750    11.0            -5.0
  4890   1998     M        1116     1428        69          75         L            0     0.766667        7.5               6.0         0.888889           12.0                 3.0            -0.122222    3.0             -4.5
  4952   1999     M        1116     1234        72          82         L            0     0.687500        5.0               4.0         0.666667           4.0                  5.0            0.020833     -1.0            1.0
  5001   2000     M        1116     1274        71          75         L            0     0.575758        7.0               11.0        0.677419           4.0                  6.0            -0.101662    5.0             3.0
  5046   2001     M        1116     1207        61          63         L            0     0.666667        5.5               7.0         0.766667           12.0                 10.0           -0.100000    -3.0            -6.5
  5381   2006     M        1116     1137        55          59         L            0     0.709677        6.0               8.0         0.862069           12.0                 9.0            -0.152392    -1.0            -6.0
  5454   2007     M        1116     1425        60          77         L            0     0.617647        8.0               12.0        0.676471           4.5                  5.0            -0.058824    7.0             3.5
  5534   2008     M        1116     1314        77          108        L            0     0.666667        6.0               9.0         0.941176           12.0                 1.0            -0.274510    8.0             -6.0
  5989   2015     M        1116     1314        78          87         L            0     0.764706        7.0               5.0         0.685714           10.0                 4.0            0.078992     1.0             -3.0
  6132   2017     M        1116     1314        65          72         L            0     0.735294        8.5               8.0         0.787879           13.0                 1.0            -0.052585    7.0             -4.5
  6172   2018     M        1116     1139        62          79         L            0     0.676471        4.5               7.0         0.606061           2.0                  10.0           0.070410     -3.0            2.5
  6344   2021     M        1116     1124        72          81         L            0     0.785714        11.5              3.0         0.916667           14.5                 1.0            -0.130952    2.0             -3.0
  6411   2022     M        1116     1181        69          78         L            0     0.757576        8.0               4.0         0.823529           11.5                 2.0            -0.065954    2.0             -3.5
  6470   2023     M        1116     1163        65          88         L            0     0.606061        6.0               8.0         0.757576           12.0                 4.0            -0.151515    4.0             -6.0

</div>

</div>
:::
:::

::: {#cell-28 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:53.187040Z\",\"iopub.status.busy\":\"2024-06-12T12:38:53.185911Z\",\"iopub.status.idle\":\"2024-06-12T12:38:59.298850Z\",\"shell.execute_reply\":\"2024-06-12T12:38:59.297541Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:53.186971Z\"}" trusted="true" execution_count="21"}
::: {#cb24 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
import warnings
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math

# Suppress all warnings
warnings.filterwarnings('ignore')

# Replace infinite values with NaN
df_historic_tourney_features.replace([np.inf, -np.inf], np.nan, inplace=True)


# Get numerical features
numerical_features = df_historic_tourney_features.select_dtypes(include=['float64', 'int64']).columns

# Calculate the number of rows and columns for subplots
num_features = len(numerical_features)
num_cols = 3
num_rows = math.ceil(num_features / num_cols)

plt.figure(figsize=(15, num_rows * 5))
for i, col in enumerate(numerical_features):
    plt.subplot(num_rows, num_cols, i + 1)
    sns.histplot(df_historic_tourney_features[col], kde=True)
    plt.title(col)

plt.tight_layout()
plt.show()
```
:::

::: {.cell-output .cell-output-display}
<div>

![](img/cell-22-output-1.png){.img-fluid.figure-img}

</div>
:::
:::
:::

::: {#baseline---higher-seed-wins .section .level1}
# Baseline - Higher Seed Wins

To do this we will simply score the accuracy on historic tournaments
assuming the higher seed always wins.

::: {#cell-30 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:59.300842Z\",\"iopub.status.busy\":\"2024-06-12T12:38:59.300437Z\",\"iopub.status.idle\":\"2024-06-12T12:38:59.312652Z\",\"shell.execute_reply\":\"2024-06-12T12:38:59.310809Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:59.300809Z\"}" trusted="true" execution_count="22"}
::: {#cb25 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
df_historic_tourney_features["BaselinePred"] = (
    df_historic_tourney_features["ChalkSeed"]
    < df_historic_tourney_features["OppChalkSeed"]
)

df_historic_tourney_features.loc[
    df_historic_tourney_features["ChalkSeed"]
    == df_historic_tourney_features["OppChalkSeed"],
    "BaselinePred",
] = (
    df_historic_tourney_features["WinPercentage"]
    > df_historic_tourney_features["OppWinPercentage"]
)
```
:::
:::

::: {#cell-31 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:59.315003Z\",\"iopub.status.busy\":\"2024-06-12T12:38:59.314608Z\",\"iopub.status.idle\":\"2024-06-12T12:38:59.865507Z\",\"shell.execute_reply\":\"2024-06-12T12:38:59.864157Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:59.314966Z\"}" trusted="true" execution_count="23"}
::: {#cb26 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
from sklearn.metrics import accuracy_score, log_loss

cv_scores_baseline = []
for season in df_historic_tourney_features["Season"].unique():
    pred = df_historic_tourney_features.query("Season == @season")[
        "BaselinePred"
    ].astype("int")
    y = df_historic_tourney_features.query("Season == @season")["Win"]
    score = accuracy_score(y, pred)
    score_ll = log_loss(y, pred)
    cv_scores_baseline.append(score)
    print(f"Holdout season {season} - Accuracy {score:0.4f} Log Loss {score_ll:0.4f}")

print(f"Baseline accuracy {np.mean(cv_scores_baseline):0.4f}")
```
:::

::: {.cell-output .cell-output-stdout}
    Holdout season 1985 - Accuracy 0.7143 Log Loss 10.2982
    Holdout season 1986 - Accuracy 0.7143 Log Loss 10.2982
    Holdout season 1987 - Accuracy 0.6984 Log Loss 10.8703
    Holdout season 1988 - Accuracy 0.7143 Log Loss 10.2982
    Holdout season 1989 - Accuracy 0.6667 Log Loss 12.0146
    Holdout season 1990 - Accuracy 0.6825 Log Loss 11.4424
    Holdout season 1991 - Accuracy 0.7460 Log Loss 9.1539
    Holdout season 1992 - Accuracy 0.7619 Log Loss 8.5818
    Holdout season 1993 - Accuracy 0.7937 Log Loss 7.4376
    Holdout season 1994 - Accuracy 0.7143 Log Loss 10.2982
    Holdout season 1995 - Accuracy 0.7619 Log Loss 8.5818
    Holdout season 1996 - Accuracy 0.7460 Log Loss 9.1539
    Holdout season 1997 - Accuracy 0.7302 Log Loss 9.7261
    Holdout season 1998 - Accuracy 0.7143 Log Loss 10.2982
    Holdout season 1999 - Accuracy 0.7222 Log Loss 10.0121
    Holdout season 2000 - Accuracy 0.7302 Log Loss 9.7261
    Holdout season 2001 - Accuracy 0.7047 Log Loss 10.6428
    Holdout season 2002 - Accuracy 0.7480 Log Loss 9.0819
    Holdout season 2003 - Accuracy 0.7402 Log Loss 9.3657
    Holdout season 2004 - Accuracy 0.7244 Log Loss 9.9333
    Holdout season 2005 - Accuracy 0.7165 Log Loss 10.2171
    Holdout season 2006 - Accuracy 0.7480 Log Loss 9.0819
    Holdout season 2007 - Accuracy 0.7717 Log Loss 8.2304
    Holdout season 2008 - Accuracy 0.8031 Log Loss 7.0952
    Holdout season 2009 - Accuracy 0.7402 Log Loss 9.3657
    Holdout season 2010 - Accuracy 0.7402 Log Loss 9.3657
    Holdout season 2011 - Accuracy 0.7000 Log Loss 10.8131
    Holdout season 2012 - Accuracy 0.7923 Log Loss 7.4860
    Holdout season 2013 - Accuracy 0.7154 Log Loss 10.2586
    Holdout season 2014 - Accuracy 0.7000 Log Loss 10.8131
    Holdout season 2015 - Accuracy 0.7923 Log Loss 7.4860
    Holdout season 2016 - Accuracy 0.6846 Log Loss 11.3676
    Holdout season 2017 - Accuracy 0.7769 Log Loss 8.0405
    Holdout season 2018 - Accuracy 0.7000 Log Loss 10.8131
    Holdout season 2019 - Accuracy 0.7538 Log Loss 8.8723
    Holdout season 2021 - Accuracy 0.7519 Log Loss 8.9411
    Holdout season 2022 - Accuracy 0.7015 Log Loss 10.7593
    Holdout season 2023 - Accuracy 0.7164 Log Loss 10.2213
    Baseline accuracy 0.7325
:::
:::
:::

::: {#xgboost-model .section .level1}
# XGBoost Model

::: {#cell-33 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:38:59.867416Z\",\"iopub.status.busy\":\"2024-06-12T12:38:59.867061Z\",\"iopub.status.idle\":\"2024-06-12T12:40:22.226128Z\",\"shell.execute_reply\":\"2024-06-12T12:40:22.224910Z\",\"shell.execute_reply.started\":\"2024-06-12T12:38:59.867385Z\"}" trusted="true" execution_count="24"}
::: {#cb28 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
FEATURES = [
       "WinPercentage",
        "MedianScoreDiff",
        "ChalkSeed",
       "OppWinPercentage",
        "OppMedianScoreDiff",
        "OppChalkSeed",
    "WinPctDiff",
        "ChalkSeedDiff"
]
TARGET = "Win"


X = df_historic_tourney_features[FEATURES]
y = df_historic_tourney_features[TARGET]
groups = df_historic_tourney_features["Season"]
seasons = df_historic_tourney_features["Season"].unique()

# Setup cross-validation
gkf = GroupKFold(n_splits=df_historic_tourney_features["Season"].nunique())
cv_results = []
models = []

season_idx = 0
for train_index, test_index in gkf.split(X, y, groups):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Prepare the model
    model = xgb.XGBRegressor(
        eval_metric="logloss",
        n_estimators=1_000,
        learning_rate=0.001,
    )
    holdout_season = seasons[season_idx]
    print(f"Holdout Season: {holdout_season}")
    # Train the model
    model.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=100)

    # Predict on the test set
    y_pred = model.predict(X_test)
    score_ll = log_loss(y_test, y_pred)
    y_pred = y_pred > 0.5
    # Evaluate the model
    accuracy = accuracy_score(y_test, y_pred)
    cv_results.append(accuracy)
    season_idx += 1
    print(f"Season {holdout_season}: {accuracy} {score_ll}")
    models.append(model)
# Print the average accuracy across all folds
print("Average CV Accuracy:", np.mean(cv_results))
```
:::

::: {.cell-output .cell-output-stdout}
    Holdout Season: 1985
    [0] validation_0-logloss:0.69289
    [100]   validation_0-logloss:0.66959
    [200]   validation_0-logloss:0.65069
    [300]   validation_0-logloss:0.63538
    [400]   validation_0-logloss:0.62238
    [500]   validation_0-logloss:0.61101
    [600]   validation_0-logloss:0.60165
    [700]   validation_0-logloss:0.59384
    [800]   validation_0-logloss:0.58727
    [900]   validation_0-logloss:0.58168
    [999]   validation_0-logloss:0.57783
    Season 1985: 0.7388059701492538 0.5778297953897061
    Holdout Season: 1986
    [0] validation_0-logloss:0.69288
    [100]   validation_0-logloss:0.66882
    [200]   validation_0-logloss:0.64906
    [300]   validation_0-logloss:0.63319
    [400]   validation_0-logloss:0.61992
    [500]   validation_0-logloss:0.60787
    [600]   validation_0-logloss:0.59805
    [700]   validation_0-logloss:0.59025
    [800]   validation_0-logloss:0.58413
    [900]   validation_0-logloss:0.57886
    [999]   validation_0-logloss:0.57464
    Season 1986: 0.6902985074626866 0.5746410916790947
    Holdout Season: 1987
    [0] validation_0-logloss:0.69279
    [100]   validation_0-logloss:0.65966
    [200]   validation_0-logloss:0.63105
    [300]   validation_0-logloss:0.60721
    [400]   validation_0-logloss:0.58759
    [500]   validation_0-logloss:0.57118
    [600]   validation_0-logloss:0.55699
    [700]   validation_0-logloss:0.54410
    [800]   validation_0-logloss:0.53302
    [900]   validation_0-logloss:0.52317
    [999]   validation_0-logloss:0.51405
    Season 1987: 0.75 0.5140454237560299
    Holdout Season: 1988
    [0] validation_0-logloss:0.69285
    [100]   validation_0-logloss:0.66623
    [200]   validation_0-logloss:0.64427
    [300]   validation_0-logloss:0.62591
    [400]   validation_0-logloss:0.61106
    [500]   validation_0-logloss:0.59889
    [600]   validation_0-logloss:0.58833
    [700]   validation_0-logloss:0.57878
    [800]   validation_0-logloss:0.57083
    [900]   validation_0-logloss:0.56448
    [999]   validation_0-logloss:0.55938
    Season 1988: 0.7038461538461539 0.5593773261339369
    Holdout Season: 1989
    [0] validation_0-logloss:0.69280
    [100]   validation_0-logloss:0.66095
    [200]   validation_0-logloss:0.63427
    [300]   validation_0-logloss:0.61216
    [400]   validation_0-logloss:0.59319
    [500]   validation_0-logloss:0.57735
    [600]   validation_0-logloss:0.56368
    [700]   validation_0-logloss:0.55191
    [800]   validation_0-logloss:0.54149
    [900]   validation_0-logloss:0.53248
    [999]   validation_0-logloss:0.52479
    Season 1989: 0.7884615384615384 0.5247887917788466
    Holdout Season: 1990
    [0] validation_0-logloss:0.69287
    [100]   validation_0-logloss:0.66713
    [200]   validation_0-logloss:0.64599
    [300]   validation_0-logloss:0.62820
    [400]   validation_0-logloss:0.61317
    [500]   validation_0-logloss:0.60001
    [600]   validation_0-logloss:0.58916
    [700]   validation_0-logloss:0.58034
    [800]   validation_0-logloss:0.57328
    [900]   validation_0-logloss:0.56775
    [999]   validation_0-logloss:0.56280
    Season 1990: 0.7269230769230769 0.5628005594382917
    Holdout Season: 1991
    [0] validation_0-logloss:0.69279
    [100]   validation_0-logloss:0.66054
    [200]   validation_0-logloss:0.63394
    [300]   validation_0-logloss:0.61099
    [400]   validation_0-logloss:0.59190
    [500]   validation_0-logloss:0.57585
    [600]   validation_0-logloss:0.56179
    [700]   validation_0-logloss:0.54953
    [800]   validation_0-logloss:0.53909
    [900]   validation_0-logloss:0.52938
    [999]   validation_0-logloss:0.52094
    Season 1991: 0.7807692307692308 0.5209394005663719
    Holdout Season: 1992
    [0] validation_0-logloss:0.69286
    [100]   validation_0-logloss:0.66644
    [200]   validation_0-logloss:0.64507
    [300]   validation_0-logloss:0.62768
    [400]   validation_0-logloss:0.61345
    [500]   validation_0-logloss:0.60177
    [600]   validation_0-logloss:0.59163
    [700]   validation_0-logloss:0.58264
    [800]   validation_0-logloss:0.57539
    [900]   validation_0-logloss:0.56918
    [999]   validation_0-logloss:0.56388
    Season 1992: 0.6961538461538461 0.5638759436656668
    Holdout Season: 1993
    [0] validation_0-logloss:0.69286
    [100]   validation_0-logloss:0.66692
    [200]   validation_0-logloss:0.64527
    [300]   validation_0-logloss:0.62694
    [400]   validation_0-logloss:0.61169
    [500]   validation_0-logloss:0.59876
    [600]   validation_0-logloss:0.58816
    [700]   validation_0-logloss:0.57937
    [800]   validation_0-logloss:0.57203
    [900]   validation_0-logloss:0.56525
    [999]   validation_0-logloss:0.55973
    Season 1993: 0.7038461538461539 0.5597309496798991
    Holdout Season: 1994
    [0] validation_0-logloss:0.69284
    [100]   validation_0-logloss:0.66468
    [200]   validation_0-logloss:0.63918
    [300]   validation_0-logloss:0.61844
    [400]   validation_0-logloss:0.60206
    [500]   validation_0-logloss:0.58784
    [600]   validation_0-logloss:0.57519
    [700]   validation_0-logloss:0.56416
    [800]   validation_0-logloss:0.55484
    [900]   validation_0-logloss:0.54798
    [999]   validation_0-logloss:0.54230
    Season 1994: 0.75 0.5423035564199855
    Holdout Season: 1995
    [0] validation_0-logloss:0.69284
    [100]   validation_0-logloss:0.66487
    [200]   validation_0-logloss:0.64208
    [300]   validation_0-logloss:0.62291
    [400]   validation_0-logloss:0.60702
    [500]   validation_0-logloss:0.59393
    [600]   validation_0-logloss:0.58276
    [700]   validation_0-logloss:0.57300
    [800]   validation_0-logloss:0.56453
    [900]   validation_0-logloss:0.55728
    [999]   validation_0-logloss:0.55142
    Season 1995: 0.7038461538461539 0.5514155650375784
    Holdout Season: 1996
    [0] validation_0-logloss:0.69286
    [100]   validation_0-logloss:0.66706
    [200]   validation_0-logloss:0.64582
    [300]   validation_0-logloss:0.62855
    [400]   validation_0-logloss:0.61431
    [500]   validation_0-logloss:0.60184
    [600]   validation_0-logloss:0.59106
    [700]   validation_0-logloss:0.58220
    [800]   validation_0-logloss:0.57470
    [900]   validation_0-logloss:0.56827
    [999]   validation_0-logloss:0.56252
    Season 1996: 0.748062015503876 0.5625201829225002
    Holdout Season: 1997
    [0] validation_0-logloss:0.69281
    [100]   validation_0-logloss:0.66213
    [200]   validation_0-logloss:0.63632
    [300]   validation_0-logloss:0.61529
    [400]   validation_0-logloss:0.59747
    [500]   validation_0-logloss:0.58238
    [600]   validation_0-logloss:0.56959
    [700]   validation_0-logloss:0.55879
    [800]   validation_0-logloss:0.54948
    [900]   validation_0-logloss:0.54136
    [999]   validation_0-logloss:0.53445
    Season 1997: 0.6968503937007874 0.5344523644145192
    Holdout Season: 1998
    [0] validation_0-logloss:0.69283
    [100]   validation_0-logloss:0.66432
    [200]   validation_0-logloss:0.64074
    [300]   validation_0-logloss:0.62166
    [400]   validation_0-logloss:0.60571
    [500]   validation_0-logloss:0.59174
    [600]   validation_0-logloss:0.57976
    [700]   validation_0-logloss:0.57015
    [800]   validation_0-logloss:0.56236
    [900]   validation_0-logloss:0.55623
    [999]   validation_0-logloss:0.55118
    Season 1998: 0.7007874015748031 0.5511808710089903
    Holdout Season: 1999
    [0] validation_0-logloss:0.69283
    [100]   validation_0-logloss:0.66377
    [200]   validation_0-logloss:0.63985
    [300]   validation_0-logloss:0.61951
    [400]   validation_0-logloss:0.60174
    [500]   validation_0-logloss:0.58692
    [600]   validation_0-logloss:0.57416
    [700]   validation_0-logloss:0.56353
    [800]   validation_0-logloss:0.55441
    [900]   validation_0-logloss:0.54638
    [999]   validation_0-logloss:0.53948
    Season 1999: 0.7598425196850394 0.5394789986657479
    Holdout Season: 2000
    [0] validation_0-logloss:0.69282
    [100]   validation_0-logloss:0.66268
    [200]   validation_0-logloss:0.63775
    [300]   validation_0-logloss:0.61673
    [400]   validation_0-logloss:0.59911
    [500]   validation_0-logloss:0.58420
    [600]   validation_0-logloss:0.57191
    [700]   validation_0-logloss:0.56153
    [800]   validation_0-logloss:0.55283
    [900]   validation_0-logloss:0.54518
    [999]   validation_0-logloss:0.53916
    Season 2000: 0.7480314960629921 0.5391647286090452
    Holdout Season: 2001
    [0] validation_0-logloss:0.69281
    [100]   validation_0-logloss:0.66195
    [200]   validation_0-logloss:0.63569
    [300]   validation_0-logloss:0.61374
    [400]   validation_0-logloss:0.59482
    [500]   validation_0-logloss:0.57860
    [600]   validation_0-logloss:0.56502
    [700]   validation_0-logloss:0.55295
    [800]   validation_0-logloss:0.54328
    [900]   validation_0-logloss:0.53569
    [999]   validation_0-logloss:0.52856
    Season 2001: 0.7362204724409449 0.5285587446199357
    Holdout Season: 2002
    [0] validation_0-logloss:0.69282
    [100]   validation_0-logloss:0.66278
    [200]   validation_0-logloss:0.63832
    [300]   validation_0-logloss:0.61846
    [400]   validation_0-logloss:0.60142
    [500]   validation_0-logloss:0.58682
    [600]   validation_0-logloss:0.57428
    [700]   validation_0-logloss:0.56378
    [800]   validation_0-logloss:0.55461
    [900]   validation_0-logloss:0.54673
    [999]   validation_0-logloss:0.53948
    Season 2002: 0.7598425196850394 0.5394769853566181
    Holdout Season: 2003
    [0] validation_0-logloss:0.69278
    [100]   validation_0-logloss:0.65820
    [200]   validation_0-logloss:0.62854
    [300]   validation_0-logloss:0.60321
    [400]   validation_0-logloss:0.58185
    [500]   validation_0-logloss:0.56368
    [600]   validation_0-logloss:0.54842
    [700]   validation_0-logloss:0.53497
    [800]   validation_0-logloss:0.52316
    [900]   validation_0-logloss:0.51282
    [999]   validation_0-logloss:0.50337
    Season 2003: 0.8110236220472441 0.5033689635420715
    Holdout Season: 2004
    [0] validation_0-logloss:0.69279
    [100]   validation_0-logloss:0.66004
    [200]   validation_0-logloss:0.63298
    [300]   validation_0-logloss:0.61002
    [400]   validation_0-logloss:0.59091
    [500]   validation_0-logloss:0.57495
    [600]   validation_0-logloss:0.56084
    [700]   validation_0-logloss:0.54809
    [800]   validation_0-logloss:0.53646
    [900]   validation_0-logloss:0.52657
    [999]   validation_0-logloss:0.51806
    Season 2004: 0.7598425196850394 0.518058388778077
    Holdout Season: 2005
    [0] validation_0-logloss:0.69285
    [100]   validation_0-logloss:0.66593
    [200]   validation_0-logloss:0.64316
    [300]   validation_0-logloss:0.62386
    [400]   validation_0-logloss:0.60806
    [500]   validation_0-logloss:0.59532
    [600]   validation_0-logloss:0.58458
    [700]   validation_0-logloss:0.57532
    [800]   validation_0-logloss:0.56777
    [900]   validation_0-logloss:0.56184
    [999]   validation_0-logloss:0.55686
    Season 2005: 0.7204724409448819 0.5568630854801879
    Holdout Season: 2006
    [0] validation_0-logloss:0.69279
    [100]   validation_0-logloss:0.66073
    [200]   validation_0-logloss:0.63402
    [300]   validation_0-logloss:0.61214
    [400]   validation_0-logloss:0.59401
    [500]   validation_0-logloss:0.57845
    [600]   validation_0-logloss:0.56532
    [700]   validation_0-logloss:0.55379
    [800]   validation_0-logloss:0.54412
    [900]   validation_0-logloss:0.53580
    [999]   validation_0-logloss:0.52888
    Season 2006: 0.7834645669291339 0.5288818500432665
    Holdout Season: 2007
    [0] validation_0-logloss:0.69280
    [100]   validation_0-logloss:0.66140
    [200]   validation_0-logloss:0.63545
    [300]   validation_0-logloss:0.61412
    [400]   validation_0-logloss:0.59582
    [500]   validation_0-logloss:0.58045
    [600]   validation_0-logloss:0.56727
    [700]   validation_0-logloss:0.55605
    [800]   validation_0-logloss:0.54700
    [900]   validation_0-logloss:0.53899
    [999]   validation_0-logloss:0.53207
    Season 2007: 0.7301587301587301 0.5320677444183068
    Holdout Season: 2008
    [0] validation_0-logloss:0.69282
    [100]   validation_0-logloss:0.66283
    [200]   validation_0-logloss:0.63764
    [300]   validation_0-logloss:0.61655
    [400]   validation_0-logloss:0.59906
    [500]   validation_0-logloss:0.58414
    [600]   validation_0-logloss:0.57135
    [700]   validation_0-logloss:0.56081
    [800]   validation_0-logloss:0.55198
    [900]   validation_0-logloss:0.54486
    [999]   validation_0-logloss:0.53912
    Season 2008: 0.7063492063492064 0.5391169694796966
    Holdout Season: 2009
    [0] validation_0-logloss:0.69285
    [100]   validation_0-logloss:0.66541
    [200]   validation_0-logloss:0.64289
    [300]   validation_0-logloss:0.62259
    [400]   validation_0-logloss:0.60512
    [500]   validation_0-logloss:0.59025
    [600]   validation_0-logloss:0.57842
    [700]   validation_0-logloss:0.56846
    [800]   validation_0-logloss:0.55988
    [900]   validation_0-logloss:0.55266
    [999]   validation_0-logloss:0.54624
    Season 2009: 0.7341269841269841 0.5462413883044884
    Holdout Season: 2010
    [0] validation_0-logloss:0.69287
    [100]   validation_0-logloss:0.66895
    [200]   validation_0-logloss:0.64925
    [300]   validation_0-logloss:0.63285
    [400]   validation_0-logloss:0.61851
    [500]   validation_0-logloss:0.60678
    [600]   validation_0-logloss:0.59829
    [700]   validation_0-logloss:0.59128
    [800]   validation_0-logloss:0.58547
    [900]   validation_0-logloss:0.58057
    [999]   validation_0-logloss:0.57621
    Season 2010: 0.746031746031746 0.5762088515730862
    Holdout Season: 2011
    [0] validation_0-logloss:0.69287
    [100]   validation_0-logloss:0.66799
    [200]   validation_0-logloss:0.64904
    [300]   validation_0-logloss:0.63373
    [400]   validation_0-logloss:0.62165
    [500]   validation_0-logloss:0.61168
    [600]   validation_0-logloss:0.60233
    [700]   validation_0-logloss:0.59461
    [800]   validation_0-logloss:0.58855
    [900]   validation_0-logloss:0.58447
    [999]   validation_0-logloss:0.58129
    Season 2011: 0.7063492063492064 0.5812932656654312
    Holdout Season: 2012
    [0] validation_0-logloss:0.69289
    [100]   validation_0-logloss:0.66963
    [200]   validation_0-logloss:0.65096
    [300]   validation_0-logloss:0.63522
    [400]   validation_0-logloss:0.62203
    [500]   validation_0-logloss:0.61131
    [600]   validation_0-logloss:0.60321
    [700]   validation_0-logloss:0.59699
    [800]   validation_0-logloss:0.59160
    [900]   validation_0-logloss:0.58604
    [999]   validation_0-logloss:0.58108
    Season 2012: 0.6825396825396826 0.5810827664532549
    Holdout Season: 2013
    [0] validation_0-logloss:0.69287
    [100]   validation_0-logloss:0.66859
    [200]   validation_0-logloss:0.64898
    [300]   validation_0-logloss:0.63316
    [400]   validation_0-logloss:0.61976
    [500]   validation_0-logloss:0.60907
    [600]   validation_0-logloss:0.60078
    [700]   validation_0-logloss:0.59385
    [800]   validation_0-logloss:0.58772
    [900]   validation_0-logloss:0.58348
    [999]   validation_0-logloss:0.58025
    Season 2013: 0.6904761904761905 0.5802509797933194
    Holdout Season: 2014
    [0] validation_0-logloss:0.69287
    [100]   validation_0-logloss:0.66770
    [200]   validation_0-logloss:0.64557
    [300]   validation_0-logloss:0.62656
    [400]   validation_0-logloss:0.61011
    [500]   validation_0-logloss:0.59621
    [600]   validation_0-logloss:0.58392
    [700]   validation_0-logloss:0.57417
    [800]   validation_0-logloss:0.56614
    [900]   validation_0-logloss:0.55869
    [999]   validation_0-logloss:0.55304
    Season 2014: 0.7142857142857143 0.553043633254014
    Holdout Season: 2015
    [0] validation_0-logloss:0.69291
    [100]   validation_0-logloss:0.67182
    [200]   validation_0-logloss:0.65480
    [300]   validation_0-logloss:0.64066
    [400]   validation_0-logloss:0.62913
    [500]   validation_0-logloss:0.61952
    [600]   validation_0-logloss:0.61138
    [700]   validation_0-logloss:0.60411
    [800]   validation_0-logloss:0.59840
    [900]   validation_0-logloss:0.59297
    [999]   validation_0-logloss:0.58755
    Season 2015: 0.6666666666666666 0.5875460362566335
    Holdout Season: 2016
    [0] validation_0-logloss:0.69285
    [100]   validation_0-logloss:0.66582
    [200]   validation_0-logloss:0.64238
    [300]   validation_0-logloss:0.62351
    [400]   validation_0-logloss:0.60794
    [500]   validation_0-logloss:0.59474
    [600]   validation_0-logloss:0.58378
    [700]   validation_0-logloss:0.57469
    [800]   validation_0-logloss:0.56706
    [900]   validation_0-logloss:0.55932
    [999]   validation_0-logloss:0.55255
    Season 2016: 0.7698412698412699 0.5525456201369173
    Holdout Season: 2017
    [0] validation_0-logloss:0.69288
    [100]   validation_0-logloss:0.66787
    [200]   validation_0-logloss:0.64759
    [300]   validation_0-logloss:0.62961
    [400]   validation_0-logloss:0.61464
    [500]   validation_0-logloss:0.60223
    [600]   validation_0-logloss:0.59172
    [700]   validation_0-logloss:0.58283
    [800]   validation_0-logloss:0.57539
    [900]   validation_0-logloss:0.56904
    [999]   validation_0-logloss:0.56344
    Season 2017: 0.7698412698412699 0.5634443193271796
    Holdout Season: 2018
    [0] validation_0-logloss:0.69281
    [100]   validation_0-logloss:0.66275
    [200]   validation_0-logloss:0.63768
    [300]   validation_0-logloss:0.61566
    [400]   validation_0-logloss:0.59696
    [500]   validation_0-logloss:0.58147
    [600]   validation_0-logloss:0.56827
    [700]   validation_0-logloss:0.55691
    [800]   validation_0-logloss:0.54721
    [900]   validation_0-logloss:0.53843
    [999]   validation_0-logloss:0.53049
    Season 2018: 0.7936507936507936 0.530490176309942
    Holdout Season: 2019
    [0] validation_0-logloss:0.69286
    [100]   validation_0-logloss:0.66659
    [200]   validation_0-logloss:0.64485
    [300]   validation_0-logloss:0.62537
    [400]   validation_0-logloss:0.60911
    [500]   validation_0-logloss:0.59551
    [600]   validation_0-logloss:0.58377
    [700]   validation_0-logloss:0.57349
    [800]   validation_0-logloss:0.56437
    [900]   validation_0-logloss:0.55681
    [999]   validation_0-logloss:0.55022
    Season 2019: 0.7301587301587301 0.5502209399838572
    Holdout Season: 2021
    [0] validation_0-logloss:0.69285
    [100]   validation_0-logloss:0.66611
    [200]   validation_0-logloss:0.64414
    [300]   validation_0-logloss:0.62468
    [400]   validation_0-logloss:0.60717
    [500]   validation_0-logloss:0.59322
    [600]   validation_0-logloss:0.58191
    [700]   validation_0-logloss:0.57141
    [800]   validation_0-logloss:0.56251
    [900]   validation_0-logloss:0.55529
    [999]   validation_0-logloss:0.54939
    Season 2021: 0.7936507936507936 0.5493942297502401
    Holdout Season: 2022
    [0] validation_0-logloss:0.69289
    [100]   validation_0-logloss:0.66851
    [200]   validation_0-logloss:0.64874
    [300]   validation_0-logloss:0.63198
    [400]   validation_0-logloss:0.61734
    [500]   validation_0-logloss:0.60451
    [600]   validation_0-logloss:0.59320
    [700]   validation_0-logloss:0.58400
    [800]   validation_0-logloss:0.57707
    [900]   validation_0-logloss:0.57161
    [999]   validation_0-logloss:0.56720
    Season 2022: 0.7301587301587301 0.5671985749078063
    Holdout Season: 2023
    [0] validation_0-logloss:0.69288
    [100]   validation_0-logloss:0.66923
    [200]   validation_0-logloss:0.64961
    [300]   validation_0-logloss:0.63407
    [400]   validation_0-logloss:0.62084
    [500]   validation_0-logloss:0.61033
    [600]   validation_0-logloss:0.60186
    [700]   validation_0-logloss:0.59503
    [800]   validation_0-logloss:0.58943
    [900]   validation_0-logloss:0.58486
    [999]   validation_0-logloss:0.58053
    Season 2023: 0.7142857142857143 0.5805315287572473
    Average CV Accuracy: 0.7351568954812976
:::
:::
:::

::: {#predict-on-test-set .section .level1}
# Predict on Test Set

Now that we've trained our models. We can use them to predict on our
future data.

::: {#cell-35 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:22.227938Z\",\"iopub.status.busy\":\"2024-06-12T12:40:22.227579Z\",\"iopub.status.idle\":\"2024-06-12T12:40:22.242250Z\",\"shell.execute_reply\":\"2024-06-12T12:40:22.240815Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:22.227906Z\"}" trusted="true" execution_count="25"}
::: {#cb30 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
TEST_SEASON = 2024  # Change to 2024 when it comes out!

seeds_2024 = pd.read_csv(DATA_PATH + "2024_tourney_seeds.csv")

seeds_2024["ChalkSeed"] = (
    seeds_2024["Seed"].str.replace("a", "").str.replace("b", "").str[1:].astype("int")
)
```
:::
:::
:::

::: {#tourney-pairs .section .level1}
# Tourney Pairs

-   We don't know which teams will play each other in later rounds, so
    we create a tourney_pairs dataframe.
-   This dataframe has all possible combinations of games. We will use
    our model to predict these.

::: {#cell-37 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:22.244272Z\",\"iopub.status.busy\":\"2024-06-12T12:40:22.243862Z\",\"iopub.status.idle\":\"2024-06-12T12:40:22.300419Z\",\"shell.execute_reply\":\"2024-06-12T12:40:22.299289Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:22.244234Z\"}" trusted="true" execution_count="26"}
::: {#cb31 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
tourney_pairs = (
    seeds_2024.merge(seeds_2024, on=["Tournament"], suffixes=("", "Opp"))
    .assign(Season=TEST_SEASON)
    .query("TeamID != TeamIDOpp")
    .rename(columns={"Tournament": "League"})
)

tourney_pairs = (
    tourney_pairs.merge(
        team_season_agg[
            ["Season", "League", "TeamID", "WinPercentage", "MedianScoreDiff"]
        ],
        on=["Season", "League", "TeamID"],
        how="left",
    )
    .merge(
        team_season_agg[
            ["Season", "League", "TeamID", "WinPercentage", "MedianScoreDiff"]
        ].rename(
            columns={
                "TeamID": "TeamIDOpp",
                "WinPercentage": "OppWinPercentage",
                "MedianScoreDiff": "OppMedianScoreDiff",
            }
        ),
        on=["Season", "League", "TeamIDOpp"],
    )
    .reset_index(drop=True)
)

tourney_pairs["OppChalkSeed"] = (
    tourney_pairs["SeedOpp"]
    .str.replace("a", "")
    .str.replace("b", "")
    .str[1:]
    .astype("int")
)
```
:::
:::
:::

::: {#add-features-to-2024 .section .level1}
# Add Features to 2024

::: {#cell-39 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:22.302105Z\",\"iopub.status.busy\":\"2024-06-12T12:40:22.301781Z\",\"iopub.status.idle\":\"2024-06-12T12:40:22.315321Z\",\"shell.execute_reply\":\"2024-06-12T12:40:22.313902Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:22.302078Z\"}" trusted="true" execution_count="27"}
::: {#cb32 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}

tourney_pairs["BaselinePred"] = (
    tourney_pairs["ChalkSeed"] < tourney_pairs["OppChalkSeed"]
)

tourney_pairs.loc[
    tourney_pairs["ChalkSeed"] == tourney_pairs["OppChalkSeed"],
    "BaselinePred",
] = (
    tourney_pairs["WinPercentage"] > tourney_pairs["OppWinPercentage"]
)

tourney_pairs["WinPctDiff"] = (
    tourney_pairs["WinPercentage"] - tourney_pairs["OppWinPercentage"]
)

tourney_pairs["ChalkSeedDiff"] = (
    tourney_pairs["ChalkSeed"] - tourney_pairs["OppChalkSeed"]
)

tourney_pairs["MedianScoreDiffDiff"] = (
    tourney_pairs["MedianScoreDiff"] - tourney_pairs["OppMedianScoreDiff"]
)
```
:::
:::

::: {#cell-40 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:22.322665Z\",\"iopub.status.busy\":\"2024-06-12T12:40:22.321524Z\",\"iopub.status.idle\":\"2024-06-12T12:40:22.345290Z\",\"shell.execute_reply\":\"2024-06-12T12:40:22.343714Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:22.322617Z\"}" trusted="true" execution_count="28"}
::: {#cb33 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
tourney_pairs.head()
```
:::

::: {.cell-output .cell-output-display execution_count="28"}
<div>

<div>

      League   Seed   TeamID   ChalkSeed   SeedOpp   TeamIDOpp   ChalkSeedOpp   Season   WinPercentage   MedianScoreDiff   OppWinPercentage   OppMedianScoreDiff   OppChalkSeed   BaselinePred   WinPctDiff   ChalkSeedDiff   MedianScoreDiffDiff
  --- -------- ------ -------- ----------- --------- ----------- -------------- -------- --------------- ----------------- ------------------ -------------------- -------------- -------------- ------------ --------------- ---------------------
  0   M        W01    1163     1           W02       1235        2              2024     0.911765        14.0              0.794118           10.0                 2              True           0.117647     -1              4.0
  1   M        W01    1163     1           W03       1228        3              2024     0.911765        14.0              0.764706           9.5                  3              True           0.147059     -2              4.5
  2   M        W01    1163     1           W04       1120        4              2024     0.911765        14.0              0.794118           17.0                 4              True           0.117647     -3              -3.0
  3   M        W01    1163     1           W05       1361        5              2024     0.911765        14.0              0.687500           8.5                  5              True           0.224265     -4              5.5
  4   M        W01    1163     1           W06       1140        6              2024     0.911765        14.0              0.696970           9.0                  6              True           0.214795     -5              5.0

</div>

</div>
:::
:::
:::

::: {#create-predictions-and-aggregate .section .level1}
# Create Predictions and Aggregate

-   Loop through each of the models we trained before and predict on the
    latest tourney seed data.

::: {#cell-42 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:22.347623Z\",\"iopub.status.busy\":\"2024-06-12T12:40:22.347137Z\",\"iopub.status.idle\":\"2024-06-12T12:40:25.865060Z\",\"shell.execute_reply\":\"2024-06-12T12:40:25.864062Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:22.347582Z\"}" trusted="true" execution_count="29"}
::: {#cb34 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
for i, model in enumerate(models):
    tourney_pairs[f"pred_model{i}"] = model.predict(tourney_pairs[FEATURES])
```
:::
:::

::: {#cell-43 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:25.867315Z\",\"iopub.status.busy\":\"2024-06-12T12:40:25.866742Z\",\"iopub.status.idle\":\"2024-06-12T12:40:25.897532Z\",\"shell.execute_reply\":\"2024-06-12T12:40:25.896096Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:25.867267Z\"}" trusted="true" execution_count="30"}
::: {#cb35 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
tourney_pairs["Pred"] = tourney_pairs[
    [f for f in tourney_pairs.columns if "model" in f]
].mean(axis=1)

tourney_pairs["ID"] = (
    tourney_pairs["Season"].astype("str")
    + "_"
    + tourney_pairs["TeamID"].astype("str")
    + "_"
    + tourney_pairs["TeamIDOpp"].astype("str")
)

preds = tourney_pairs.copy()
```
:::
:::
:::

::: {#simulate-bracket .section .level1}
# Simulate Bracket

-   Now we have probabilites for every possible combination of possible
    games in the tournament.
-   We want to convert this into a standard "bracket" format.
-   To do this we simulate each round and select the highest scored
    team.

::: {#cell-45 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:25.900195Z\",\"iopub.status.busy\":\"2024-06-12T12:40:25.899153Z\",\"iopub.status.idle\":\"2024-06-12T12:40:25.956224Z\",\"shell.execute_reply\":\"2024-06-12T12:40:25.954931Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:25.900153Z\"}" trusted="true" execution_count="31"}
::: {#cb36 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
from tqdm import tqdm

# Load and filter data
round_slots = pd.read_csv(
    "/kaggle/input/march-machine-learning-mania-2024/MNCAATourneySlots.csv"
)
round_slots = round_slots[round_slots["Season"] == 2024]
round_slots = round_slots[
    round_slots["Slot"].str.contains("R")
]  # Filter out First Four

seeds = pd.read_csv(
    "/kaggle/input/march-machine-learning-mania-2024/2024_tourney_seeds.csv"
)
seeds_m = seeds[seeds["Tournament"] == "M"]
seeds_w = seeds[seeds["Tournament"] == "W"]

preds["ID"] = preds["ID"].str.split("_")
```
:::
:::

::: {#cell-46 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:25.957982Z\",\"iopub.status.busy\":\"2024-06-12T12:40:25.957662Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.011937Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.010472Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:25.957956Z\"}" trusted="true" execution_count="32"}
::: {#cb37 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
def prepare_data(seeds, preds):
    # Function preparing the data for the simulation
    seed_dict = seeds.set_index("Seed")["TeamID"].to_dict()
    inverted_seed_dict = {value: key for key, value in seed_dict.items()}
    probas_dict = {}

    for teams, proba in zip(preds["ID"], preds["Pred"]):
        team1, team2 = teams[1], teams[2]

        probas_dict.setdefault(team1, {})[team2] = proba
        probas_dict.setdefault(team2, {})[team1] = 1 - proba

    return seed_dict, inverted_seed_dict, probas_dict


def simulate(round_slots, seeds, inverted_seeds, probas, sim=True):
    
    winners = []
    slots = []

    for slot, strong, weak in zip(
        round_slots.Slot, round_slots.StrongSeed, round_slots.WeakSeed
    ):
        team_1, team_2 = seeds[strong], seeds[weak]

        # Get the probability of team_1 winning
        proba = probas[str(team_1)][str(team_2)]

        if sim:
            # Randomly determine the winner based on the probability
            winner = np.random.choice([team_1, team_2], p=[proba, 1 - proba])
        else:
            # Determine the winner based on the higher probability
            winner = [team_1, team_2][np.argmax([proba, 1 - proba])]

        # Append the winner and corresponding slot to the lists
        winners.append(winner)
        slots.append(slot)

        seeds[slot] = winner

    # Convert winners to original seeds using the inverted_seeds dictionary
    return [inverted_seeds[w] for w in winners], slots


def run_simulation(brackets=1, seeds=None, preds=None, round_slots=None, sim=True):
    
    # Get relevant data for the simulation
    seed_dict, inverted_seed_dict, probas_dict = prepare_data(seeds, preds)
    # Lists to store simulation results
    results = []
    bracket = []
    slots = []

    # Iterate through the specified number of brackets
    for b in tqdm(range(1, brackets + 1)):
        # Run single simulation
        r, s = simulate(round_slots, seed_dict, inverted_seed_dict, probas_dict, sim)

        # Update results
        results.extend(r)
        bracket.extend([b] * len(r))
        slots.extend(s)

    # Create final DataFrame
    result_df = pd.DataFrame({"Bracket": bracket, "Slot": slots, "Team": results})

    return result_df


n_brackets = 1
result_m = run_simulation(
    brackets=n_brackets, seeds=seeds_m, preds=preds, round_slots=round_slots, sim=False
)
result_m["Tournament"] = "M"
result_w = run_simulation(
    brackets=n_brackets, seeds=seeds_w, preds=preds, round_slots=round_slots, sim=False
)
result_w["Tournament"] = "W"
submission = pd.concat([result_m, result_w])
submission = submission.reset_index(drop=True)
submission.index.names = ["RowId"]
submission = submission.reset_index()
```
:::

::: {.cell-output .cell-output-stderr}
    100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1/1 [00:00<00:00, 653.73it/s]
    100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1/1 [00:00<00:00, 601.85it/s]
:::
:::

::: {#cell-47 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.013854Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.013493Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.033657Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.031228Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.013825Z\"}" trusted="true" execution_count="33"}
::: {#cb39 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
ss = pd.read_csv(DATA_PATH + "sample_submission.csv")
submission[ss.columns] = submission[ss.columns]
submission[ss.columns].to_csv("submission.csv", index=False)
```
:::
:::

::: {#cell-48 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.036520Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.035364Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.119667Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.118328Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.036448Z\"}" trusted="true" execution_count="34"}
::: {#cb40 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
submission_with_names = submission.rename(columns={"Team": "Seed"}).merge(
    seeds, on=["Seed", "Tournament"], how="left"
)

teams = pd.concat(
    [
        pd.read_csv(DATA_PATH + "MTeams.csv").assign(Tournament="M"),
        pd.read_csv(DATA_PATH + "WTeams.csv").assign(Tournament="W"),
    ]
)

submission_with_names = submission_with_names.merge(
    teams[["Tournament", "TeamID", "TeamName"]], how="left"
)
```
:::
:::

::: {#cell-49 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.121686Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.121278Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.129868Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.128398Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.121653Z\"}" trusted="true" execution_count="35"}
::: {#cb41 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
submission_with_names.to_csv("submission_with_names.csv")
```
:::
:::

::: {#cell-50 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.132310Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.131818Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.151679Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.150041Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.132269Z\"}" trusted="true" execution_count="36"}
::: {#cb42 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
submission_with_names
```
:::

::: {.cell-output .cell-output-display execution_count="36"}
<div>

<div>

         RowId   Bracket   Slot   Seed   Tournament   TeamID   TeamName
  ------ ------- --------- ------ ------ ------------ -------- ----------------
  0      0       1         R1W1   W01    M            1163     Connecticut
  1      1       1         R1W2   W02    M            1235     Iowa St
  2      2       1         R1W3   W03    M            1228     Illinois
  3      3       1         R1W4   W04    M            1120     Auburn
  4      4       1         R1W5   W05    M            1361     San Diego St
  \...   \...    \...      \...   \...   \...         \...     \...
  121    121     1         R4Y1   Y01    W            3234     Iowa
  122    122     1         R4Z1   Z03    W            3163     Connecticut
  123    123     1         R5WX   W01    W            3376     South Carolina
  124    124     1         R5YZ   Y01    W            3234     Iowa
  125    125     1         R6CH   W01    W            3376     South Carolina

126 rows Ã— 7 columns

</div>

</div>
:::
:::

::: {#cell-51 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.153675Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.153251Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.165607Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.164064Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.153637Z\"}" trusted="true" execution_count="37"}
::: {#cb43 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
output_file_path = '/kaggle/working/submission_with_names.csv'
submission_with_names.to_csv(output_file_path, index=False)
```
:::
:::

::: {#cell-52 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.168252Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.167814Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.189527Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.188007Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.168213Z\"}" trusted="true" execution_count="38"}
::: {#cb44 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
men_teams = submission_with_names[submission_with_names['Tournament'] == 'M']

# Regions: W, X, Y, Z
regions = ['W', 'X', 'Y', 'Z']

# Create a dictionary to hold the bracket mapping
bracket_mapping = {region: {} for region in regions}

# Populate the bracket mapping
for _, row in men_teams.iterrows():
    region = row['Seed'][0]
    seed = int(row['Seed'][1:])
    team_name = row['TeamName']
    
    bracket_mapping[region][seed] = team_name

bracket_mapping
```
:::

::: {.cell-output .cell-output-display execution_count="38"}
    {'W': {1: 'Connecticut',
      2: 'Iowa St',
      3: 'Illinois',
      4: 'Auburn',
      5: 'San Diego St',
      6: 'BYU',
      7: 'Washington St',
      8: 'FL Atlantic'},
     'X': {1: 'North Carolina',
      2: 'Arizona',
      3: 'Baylor',
      4: 'Alabama',
      5: "St Mary's CA",
      6: 'Clemson',
      7: 'Dayton',
      8: 'Mississippi St'},
     'Y': {1: 'Purdue',
      2: 'Tennessee',
      3: 'Creighton',
      4: 'Kansas',
      5: 'Gonzaga',
      6: 'South Carolina',
      7: 'Texas',
      8: 'Utah St'},
     'Z': {1: 'Houston',
      2: 'Marquette',
      3: 'Kentucky',
      4: 'Duke',
      5: 'Wisconsin',
      6: 'Texas Tech',
      7: 'Florida',
      8: 'Nebraska'}}
:::
:::

::: {#cell-53 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.191543Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.191145Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.202384Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.200916Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.191510Z\"}" trusted="true" execution_count="39"}
::: {#cb46 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
def print_bracket(bracket_mapping):
    for region, seeds in bracket_mapping.items():
        print(f"Region {region}:")
        for seed in sorted(seeds.keys()):
            print(f"  {seed}: {seeds[seed]}")
        print()

# Print the bracket representation
print_bracket(bracket_mapping)
```
:::

::: {.cell-output .cell-output-stdout}
    Region W:
      1: Connecticut
      2: Iowa St
      3: Illinois
      4: Auburn
      5: San Diego St
      6: BYU
      7: Washington St
      8: FL Atlantic

    Region X:
      1: North Carolina
      2: Arizona
      3: Baylor
      4: Alabama
      5: St Mary's CA
      6: Clemson
      7: Dayton
      8: Mississippi St

    Region Y:
      1: Purdue
      2: Tennessee
      3: Creighton
      4: Kansas
      5: Gonzaga
      6: South Carolina
      7: Texas
      8: Utah St

    Region Z:
      1: Houston
      2: Marquette
      3: Kentucky
      4: Duke
      5: Wisconsin
      6: Texas Tech
      7: Florida
      8: Nebraska
:::
:::

::: {#cell-54 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.204377Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.204012Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.224750Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.223354Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.204343Z\"}" trusted="true" execution_count="40"}
::: {#cb48 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
women_teams = submission_with_names[submission_with_names['Tournament'] == 'w']

# Regions: W, X, Y, Z
regions = ['W', 'X', 'Y', 'Z']

# Create a dictionary to hold the bracket mapping
bracket_mapping = {region: {} for region in regions}

# Populate the bracket mapping
for _, row in men_teams.iterrows():
    region = row['Seed'][0]
    seed = int(row['Seed'][1:])
    team_name = row['TeamName']
    
    bracket_mapping[region][seed] = team_name

bracket_mapping
```
:::

::: {.cell-output .cell-output-display execution_count="40"}
    {'W': {1: 'Connecticut',
      2: 'Iowa St',
      3: 'Illinois',
      4: 'Auburn',
      5: 'San Diego St',
      6: 'BYU',
      7: 'Washington St',
      8: 'FL Atlantic'},
     'X': {1: 'North Carolina',
      2: 'Arizona',
      3: 'Baylor',
      4: 'Alabama',
      5: "St Mary's CA",
      6: 'Clemson',
      7: 'Dayton',
      8: 'Mississippi St'},
     'Y': {1: 'Purdue',
      2: 'Tennessee',
      3: 'Creighton',
      4: 'Kansas',
      5: 'Gonzaga',
      6: 'South Carolina',
      7: 'Texas',
      8: 'Utah St'},
     'Z': {1: 'Houston',
      2: 'Marquette',
      3: 'Kentucky',
      4: 'Duke',
      5: 'Wisconsin',
      6: 'Texas Tech',
      7: 'Florida',
      8: 'Nebraska'}}
:::
:::

::: {#cell-55 .cell execution="{\"iopub.execute_input\":\"2024-06-12T12:40:26.226810Z\",\"iopub.status.busy\":\"2024-06-12T12:40:26.226432Z\",\"iopub.status.idle\":\"2024-06-12T12:40:26.237500Z\",\"shell.execute_reply\":\"2024-06-12T12:40:26.236202Z\",\"shell.execute_reply.started\":\"2024-06-12T12:40:26.226779Z\"}" trusted="true" execution_count="41"}
::: {#cb50 .sourceCode .cell-code}
``` {.sourceCode .python .code-with-copy}
def print_bracket(bracket_mapping):
    for region, seeds in bracket_mapping.items():
        print(f"Region {region}:")
        for seed in sorted(seeds.keys()):
            print(f"  {seed}: {seeds[seed]}")
        print()

# Print the bracket representation
print_bracket(bracket_mapping)
```
:::

::: {.cell-output .cell-output-stdout}
    Region W:
      1: Connecticut
      2: Iowa St
      3: Illinois
      4: Auburn
      5: San Diego St
      6: BYU
      7: Washington St
      8: FL Atlantic

    Region X:
      1: North Carolina
      2: Arizona
      3: Baylor
      4: Alabama
      5: St Mary's CA
      6: Clemson
      7: Dayton
      8: Mississippi St

    Region Y:
      1: Purdue
      2: Tennessee
      3: Creighton
      4: Kansas
      5: Gonzaga
      6: South Carolina
      7: Texas
      8: Utah St

    Region Z:
      1: Houston
      2: Marquette
      3: Kentucky
      4: Duke
      5: Wisconsin
      6: Texas Tech
      7: Florida
      8: Nebraska
:::
:::
:::
:::
:::
